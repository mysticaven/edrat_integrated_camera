
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://noxleufkyqefncghqbyo.supabase.co';
const supabaseAnonKey =
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5veGxldWZreXFlZm5jZ2hxYnlvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM2NDAwODgsImV4cCI6MjA2OTIxNjA4OH0.HTJwbmmXJgd3mWmQYiJWyTNFm3sqvuBk083BxB7mSNs';

// NOTE: The tasks table has the following schema:
// id: bigint (primary key)
// created_at: timestamp with time zone (default: now())
// task_name: text
// field: text
// is_done: boolean (default: false)
// user_id: uuid (foreign key to auth.users.id)
//
// You can use the following SQL to create the table:
/*
create table
  public.tasks (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    task_name text null,
    field text null,
    is_done boolean not null default false,
    user_id uuid not null,
    constraint tasks_pkey primary key (id),
    constraint tasks_user_id_fkey foreign key (user_id) references auth.users (id) on update cascade on delete cascade
  ) tablespace pg_default;
*/

// NOTE: The notifications table has the following schema:
// id: bigint (primary key)
// created_at: timestamp with time zone (default: now())
// user_id: uuid (foreign key to auth.users.id)
// type: text (e.g., 'urgent', 'health')
// title: text
// description: text
// image_url: text
// status: text (e.g., 'active', 'snoozed', 'cleared')
//
// You can use the following SQL to create the table:
/*
create table
  public.notifications (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    user_id uuid not null,
    type text null,
    title text null,
    description text null,
    image_url text null,
    status text not null default 'active'::text,
    constraint notifications_pkey primary key (id),
    constraint notifications_user_id_fkey foreign key (user_id) references auth.users (id) on update cascade on delete cascade
  ) tablespace pg_default;
*/

// NOTE: The fields table has the following schema:
// id: bigint (primary key)
// created_at: timestamp with time zone (default: now())
// user_id: uuid (foreign key to auth.users.id)
// name: text
// pos_x: integer
// pos_y: integer
// health_status: text (e.g., 'Good', 'Fair', 'Poor')
// soil_moisture: text (e.g., 'Wet', 'Moist', 'Dry')
// plant_state: text (e.g., 'Healthy', 'Stressed', 'Drying')
//
// You can use the following SQL to create the table:
/*
create table
  public.fields (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    user_id uuid not null,
    name text null,
    pos_x integer not null,
    pos_y integer not null,
    health_status text not null default 'Good'::text,
    soil_moisture text not null default 'Moist'::text,
    plant_state text not null default 'Healthy'::text,
    constraint fields_pkey primary key (id),
    constraint fields_user_id_fkey foreign key (user_id) references auth.users (id) on update cascade on delete cascade
  ) tablespace pg_default;
*/

// NOTE: The analytics table has the following schema:
// id: bigint (primary key)
// created_at: timestamp with time zone (default: now())
// user_id: uuid (foreign key to auth.users.id)
// field_name: text
// crop_type: text
// season: text
// soil_temp: numeric
// soil_moisture: numeric
// growth_stage: text
// sunlight: numeric
// canopy_cover: numeric
// recorded_at: date
//
// You can use the following SQL to create the table:
/*
create table
  public.analytics (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    user_id uuid not null,
    field_name text null,
    crop_type text null,
    season text null,
    soil_temp numeric null,
    soil_moisture numeric null,
    growth_stage text null,
    sunlight numeric null,
    canopy_cover numeric null,
    recorded_at date null,
    constraint analytics_pkey primary key (id),
    constraint analytics_user_id_fkey foreign key (user_id) references auth.users (id) on update cascade on delete cascade
  ) tablespace pg_default;

-- To insert sample data, first find your user ID in the 'auth.users' table.
-- Then, replace 'YOUR_USER_ID' in the query below with your actual user ID.
insert into public.analytics (user_id, field_name, crop_type, season, soil_temp, soil_moisture, growth_stage, sunlight, canopy_cover, recorded_at)
values
('YOUR_USER_ID', 'Field A', 'Corn', '2024 Spring', 22.5, 60, 'Vegetative', 8.2, 30, '2024-05-01'),
('YOUR_USER_ID', 'Field A', 'Corn', '2024 Spring', 23.1, 62, 'Vegetative', 8.5, 35, '2024-05-02'),
('YOUR_USER_ID', 'Field A', 'Corn', '2024 Spring', 21.8, 58, 'Tasseling', 7.9, 40, '2024-05-03'),
('YOUR_USER_ID', 'Field B', 'Soybean', '2024 Spring', 24.0, 65, 'Flowering', 9.0, 50, '2024-05-01'),
('YOUR_USER_ID', 'Field B', 'Soybean', '2024 Spring', 24.5, 68, 'Flowering', 9.2, 55, '2024-05-02'),
('YOUR_USER_ID', 'Field B', 'Soybean', '2024 Spring', 23.5, 63, 'Pod-setting', 8.8, 60, '2024-05-03');
*/


export const supabase = createClient(supabaseUrl, supabaseAnonKey);
